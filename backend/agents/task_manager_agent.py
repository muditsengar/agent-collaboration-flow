from typing import Dict, Any
from .base_agent import BaseAgent
from services.websocket_manager import WebSocketManager

class TaskManagerAgent(BaseAgent):
    def __init__(self, ws_manager: WebSocketManager = None):
        system_message = """You are a Task Manager Agent responsible for:
        1. Breaking down complex user queries into manageable subtasks
        2. Delegating tasks to appropriate specialized agents
        3. Synthesizing and presenting final results
        4. Maintaining context and conversation flow
        5. Handling user interruptions and task reprioritization
        
        Always maintain a clear structure in your responses and track progress of delegated tasks.
        Format your responses using markdown for better readability:
        - Use headings (##) for main sections
        - Use bullet points (-) for task lists
        - Use checkboxes (- [ ]) for incomplete tasks
        - Use checkmarks (- [x]) for completed tasks
        - Use bold (**) for important deadlines or priorities
        - Use tables for task assignments and status tracking
        - Use blockquotes (>) for important notes or dependencies"""
        
        super().__init__("TaskManager", system_message, ws_manager)
    
    async def process_message(self, message: str, context: Dict[str, Any] = None, client_id: str = None) -> str:
        """Process user message and coordinate with other agents."""
        response = await super().process_message(message, context, client_id)
        return self._format_response(response)
    
    def _format_response(self, response: str) -> str:
        """Format the response with task management context and markdown styling."""
        formatted_response = f"""## Task Management Plan

{response}

---
*Generated by the Task Manager Agent - Coordinating your project needs*"""
        return formatted_response 